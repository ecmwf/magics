
/******************************  LICENSE  *******************************

 * (C) Copyright 1996-2017 ECMWF.
 * 
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0. 
 * In applying this licence, ECMWF does not waive the privileges and immunities 
 * granted to it by virtue of its status as an intergovernmental organisation nor
 * does it submit to any jurisdiction.

 *******************************  LICENSE  *******************************/

/*! \\file LandgramDecoderAttributes.h
    \\brief Definition of LandgramDecoder Attributes class.

    This file is automatically generated.
    Do Not Edit!
*/

#include "MagRequest.h" 
#include "LandgramDecoderWrapper.h"
#include "MagicsParameter.h"
#include "Factory.h"
#include "MagTranslator.h"

using namespace magics;


LandgramDecoderWrapper::LandgramDecoderWrapper(): landgramdecoder_(new LandgramDecoder())

{

	
	
	
} 
LandgramDecoderWrapper::LandgramDecoderWrapper(LandgramDecoder* landgramdecoder): landgramdecoder_(landgramdecoder)
{
	
	
} 

LandgramDecoderWrapper::~LandgramDecoderWrapper()
{
	
}

void LandgramDecoderWrapper::set(const MagRequest& request)
{
	
	

	if  (request.countValues("LANDGRAM_INPUT_FILE_NAME") ) {
		string path_value = request("LANDGRAM_INPUT_FILE_NAME");
		landgramdecoder_->path_ = path_value;
		}
	if  (request.countValues("LANDGRAM_INPUT_SCALING_FACTOR") ) {
		double scaling_value = request("LANDGRAM_INPUT_SCALING_FACTOR");
		landgramdecoder_->scaling_ = scaling_value;
		}
	if  (request.countValues("LANDGRAM_INPUT_OFFSET_FACTOR") ) {
		double offset_value = request("LANDGRAM_INPUT_OFFSET_FACTOR");
		landgramdecoder_->offset_ = offset_value;
		}
	if  (request.countValues("LANDGRAM_TITLE") ) {
		string title_value = request("LANDGRAM_TITLE");
		landgramdecoder_->title_ = title_value;
		}
	
	
}

void LandgramDecoderWrapper::print(ostream& out)  const
{
	out << "LandgramDecoderWrapper[]";
}


    



