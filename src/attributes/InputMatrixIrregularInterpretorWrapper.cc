
/******************************  LICENSE  *******************************

 * (C) Copyright 1996-2017 ECMWF.
 *
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
 * In applying this licence, ECMWF does not waive the privileges and immunities
 * granted to it by virtue of its status as an intergovernmental organisation nor
 * does it submit to any jurisdiction.

 *******************************  LICENSE  *******************************/

/*! \\file InputMatrixIrregularInterpretorAttributes.h
    \\brief Definition of InputMatrixIrregularInterpretor Attributes class.

    This file is automatically generated.
    Do Not Edit!

*/

#include "MagRequest.h"
#include "InputMatrixIrregularInterpretorWrapper.h"
#include "MagicsParameter.h"
#include "Factory.h"
#include "MagTranslator.h"
#include "MagicsGlobal.h"

using namespace magics;



InputMatrixIrregularInterpretorWrapper::InputMatrixIrregularInterpretorWrapper(): inputmatrixirregularinterpretor_(new InputMatrixIrregularInterpretor())


{


	

}
InputMatrixIrregularInterpretorWrapper::InputMatrixIrregularInterpretorWrapper(InputMatrixIrregularInterpretor* inputmatrixirregularinterpretor): inputmatrixirregularinterpretor_(inputmatrixirregularinterpretor)
{

	
}

InputMatrixIrregularInterpretorWrapper::~InputMatrixIrregularInterpretorWrapper()
{

}

void InputMatrixIrregularInterpretorWrapper::set(const MagRequest& request)
{

	

	
	
	if  (request.countValues("INPUT_FIELD_LATITUDES") ) {
		string latitudes_value = request("INPUT_FIELD_LATITUDES");
		inputmatrixirregularinterpretor_->latitudes_ = MagTranslator<string, Matrix>()(latitudes_value);
	}
		
	
	if  (request.countValues("INPUT_FIELD_LONGITUDES") ) {
		string longitudes_value = request("INPUT_FIELD_LONGITUDES");
		inputmatrixirregularinterpretor_->longitudes_ = MagTranslator<string, Matrix>()(longitudes_value);
	}
		
	
	if  (request.countValues("INPUT_FIELD_Y_COORDINATES") ) {
		string y_value = request("INPUT_FIELD_Y_COORDINATES");
		inputmatrixirregularinterpretor_->y_ = MagTranslator<string, Matrix>()(y_value);
	}
		
	
	if  (request.countValues("INPUT_FIELD_X_COORDINATES") ) {
		string x_value = request("INPUT_FIELD_X_COORDINATES");
		inputmatrixirregularinterpretor_->x_ = MagTranslator<string, Matrix>()(x_value);
	}
		
	
}

void InputMatrixIrregularInterpretorWrapper::print(ostream& out)  const
{
	out << "InputMatrixIrregularInterpretorWrapper[]";
}






